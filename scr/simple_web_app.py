"""
–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è Flask –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è OCR
–ë–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö —à–∞–±–ª–æ–Ω–æ–≤ - –≤—Å–µ HTML –≤—Å—Ç—Ä–æ–µ–Ω–æ
"""

from flask import Flask, request, jsonify
import os
import json
import tempfile
from datetime import datetime

app = Flask(__name__)
app.config['MAX_CONTENT_LENGTH'] = 50 * 1024 * 1024  # 50MB

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏
os.makedirs('uploads', exist_ok=True)
os.makedirs('results', exist_ok=True)

@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º HTML"""
    html = """
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>OCR 2.0 - –ü—Ä–æ—Å—Ç–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 40px; background: #f5f5f5; }
        .container { max-width: 800px; margin: 0 auto; background: white; padding: 30px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
        .upload-area { border: 2px dashed #ccc; padding: 40px; text-align: center; border-radius: 8px; margin: 20px 0; }
        .upload-area:hover { border-color: #007bff; background: #f8f9ff; }
        input[type="file"] { margin: 20px 0; }
        select, button { padding: 10px; margin: 10px 5px; border: 1px solid #ddd; border-radius: 4px; }
        button { background: #007bff; color: white; cursor: pointer; }
        button:hover { background: #0056b3; }
        .result { margin-top: 30px; padding: 20px; background: #f8f9fa; border-radius: 8px; }
        .error { color: red; background: #fee; padding: 15px; border-radius: 8px; margin: 10px 0; }
        .success { color: green; background: #efe; padding: 15px; border-radius: 8px; margin: 10px 0; }
    </style>
</head>
<body>
    <div class="container">
        <h1>üîç OCR 2.0 - –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞</h1>

        <div class="upload-area" id="uploadArea">
            <h3>üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏</h3>
            <p>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: PNG, JPG, PDF (–º–∞–∫—Å. 50MB)</p>
            <input type="file" id="fileInput" accept=".png,.jpg,.jpeg,.pdf,.bmp,.tiff" />
        </div>

        <div>
            <label>üîß OCR –î–≤–∏–∂–æ–∫:</label>
            <select id="engine">
                <option value="mock">–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º (–±–µ–∑ OCR)</option>
            </select>
        </div>

        <button onclick="processFile()">üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É</button>

        <div id="result" class="result" style="display:none;">
            <h3>üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:</h3>
            <div id="resultContent"></div>
        </div>
    </div>

    <script>
        function processFile() {
            const fileInput = document.getElementById('fileInput');
            const engine = document.getElementById('engine').value;
            const resultDiv = document.getElementById('result');
            const contentDiv = document.getElementById('resultContent');

            if (!fileInput.files[0]) {
                alert('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª!');
                return;
            }

            const formData = new FormData();
            formData.append('file', fileInput.files[0]);
            formData.append('engine', engine);

            contentDiv.innerHTML = '‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞...';
            resultDiv.style.display = 'block';

            fetch('/api/ocr/process', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    contentDiv.innerHTML = `
                        <div class="success">‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!</div>
                        <h4>üìù –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ:</h4>
                        <p><strong>–ò–º—è:</strong> ${fileInput.files[0].name}</p>
                        <p><strong>–†–∞–∑–º–µ—Ä:</strong> ${(fileInput.files[0].size / 1024 / 1024).toFixed(2)} MB</p>
                        <p><strong>–î–≤–∏–∂–æ–∫:</strong> ${engine}</p>
                        <p><strong>–í—Ä–µ–º—è:</strong> ${new Date().toLocaleString()}</p>

                        <h4>üìã –†–µ–∑—É–ª—å—Ç–∞—Ç (JSON):</h4>
                        <textarea rows="10" cols="80" readonly>${JSON.stringify(data.result, null, 2)}</textarea>
                    `;
                } else {
                    contentDiv.innerHTML = `<div class="error">‚ùå –û—à–∏–±–∫–∞: ${data.error}</div>`;
                }
            })
            .catch(error => {
                contentDiv.innerHTML = `<div class="error">‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ${error.message}</div>`;
            });
        }
    </script>
</body>
</html>
    """
    return html

@app.route('/api/ocr/process', methods=['POST'])
def process_document():
    """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    try:
        if 'file' not in request.files:
            return jsonify({'success': False, 'error': '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω'})

        file = request.files['file']
        if file.filename == '':
            return jsonify({'success': False, 'error': '–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω'})

        engine = request.form.get('engine', 'mock')

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        filename = f"{timestamp}_{file.filename}"
        filepath = os.path.join('uploads', filename)
        file.save(filepath)

        # –ü—Ä–æ—Å—Ç–∞—è –∏–º–∏—Ç–∞—Ü–∏—è OCR –æ–±—Ä–∞–±–æ—Ç–∫–∏
        result = {
            'engine': engine,
            'filename': file.filename,
            'file_size': os.path.getsize(filepath),
            'timestamp': timestamp,
            'status': 'processed',
            'raw_text': '–ü—Ä–∏–º–µ—Ä —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º)',
            'extracted_fields': {
                'doc_type': '—Ç–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç',
                'processing_note': '–î–ª—è —Ä–µ–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ OCR –¥–≤–∏–∂–∫–∏'
            },
            'message': '–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –î–ª—è –ø–æ–ª–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ OCR.'
        }

        return jsonify({
            'success': True,
            'result': result
        })

    except Exception as e:
        return jsonify({
            'success': False,
            'error': str(e)
        })

@app.route('/api/status')
def status():
    """–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ –º–æ–¥—É–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
    available_modules = []

    try:
        import numpy
        available_modules.append('numpy')
    except ImportError:
        pass

    try:
        import pytesseract
        available_modules.append('tesseract')
    except ImportError:
        pass

    try:
        import paddleocr
        available_modules.append('paddleocr')
    except ImportError:
        pass

    return jsonify({
        'status': 'running',
        'available_modules': available_modules,
        'total_modules': len(available_modules),
        'timestamp': datetime.now().isoformat()
    })

@app.route('/health')
def health():
    """–ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è"""
    return jsonify({
        'status': 'healthy',
        'message': 'OCR —Å–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç',
        'timestamp': datetime.now().isoformat()
    })

if __name__ == '__main__':
    print("üöÄ –ó–∞–ø—É—Å–∫ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ OCR –≤–µ–±-—Å–µ—Ä–≤–∏—Å–∞...")
    print("üìÅ –ü–∞–ø–∫–∞ –∑–∞–≥—Ä—É–∑–æ–∫: uploads")
    print("üåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://localhost:5000")
    print("üìã API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:")
    print("  GET  / - –≥–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")
    print("  POST /api/ocr/process - –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞")
    print("  GET  /api/status - —Å—Ç–∞—Ç—É—Å –º–æ–¥—É–ª–µ–π")
    print("  GET  /health - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è")
    print()

    app.run(debug=True, host='0.0.0.0', port=5000)