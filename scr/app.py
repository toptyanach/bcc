import streamlit as st
import json
import io
import base64
from PIL import Image, ImageDraw, ImageFont
import numpy as np
from typing import Dict, List, Tuple, Optional
import difflib
import plotly.graph_objects as go
from datetime import datetime

# –ò–º–ø–æ—Ä—Ç –≤–∞—à–∏—Ö OCR –º–æ–¥—É–ª–µ–π
from ocr_paddle import run_paddle, get_plaintext
from ocr_baseline import run_tesseract
from ocr_trocr import run_trocr
from extract import extract_fields_from_paddle, extract_fields_from_tesseract
from postprocess import call_llm_to_json, rules_based_postprocess
from metrics import cer, wer

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="OCR 2.0 –î–µ–º–æ",
    page_icon="üîç",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ö–∞—Å—Ç–æ–º–Ω—ã–π CSS –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ UI
st.markdown("""
<style>
    .stButton > button {
        background-color: #4CAF50;
        color: white;
        font-weight: bold;
        border-radius: 5px;
        border: none;
        padding: 0.5rem 1rem;
        transition: all 0.3s;
    }
    .stButton > button:hover {
        background-color: #45a049;
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0,0,0,0.2);
    }
    .metric-card {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 1rem;
        border-radius: 10px;
        color: white;
        margin: 0.5rem 0;
    }
    .diff-added {
        background-color: #d4f4dd;
        color: #22863a;
        padding: 2px 4px;
        border-radius: 3px;
    }
    .diff-removed {
        background-color: #ffdce0;
        color: #d73a49;
        padding: 2px 4px;
        text-decoration: line-through;
    }
    .json-container {
        background-color: #f6f8fa;
        border-radius: 6px;
        padding: 1rem;
        font-family: 'Courier New', monospace;
    }
</style>
""", unsafe_allow_html=True)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏
if 'ocr_results' not in st.session_state:
    st.session_state.ocr_results = {}
if 'baseline_results' not in st.session_state:
    st.session_state.baseline_results = {}
if 'processing' not in st.session_state:
    st.session_state.processing = False

def draw_bboxes_on_image(image: Image.Image, bboxes: List[Dict]) -> Image.Image:
    """–†–∏—Å–æ–≤–∞–Ω–∏–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—é—â–∏—Ö —Ä–∞–º–æ–∫ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö –ø–æ–ª–µ–π"""
    img_with_boxes = image.copy()
    draw = ImageDraw.Draw(img_with_boxes)
    
    # –¶–≤–µ—Ç–æ–≤–∞—è –ø–∞–ª–∏—Ç—Ä–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–æ–ª–µ–π
    colors = {
        'name': '#FF6B6B',
        'date': '#4ECDC4',
        'amount': '#45B7D1',
        'address': '#96CEB4',
        'phone': '#FFEAA7',
        'email': '#DDA0DD',
        'default': '#FFD93D'
    }
    
    try:
        font = ImageFont.truetype("/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf", 16)
    except:
        font = ImageFont.load_default()
    
    for bbox in bboxes:
        field_type = bbox.get('type', 'default')
        color = colors.get(field_type, colors['default'])
        
        coords = bbox.get('coordinates', [])
        if len(coords) >= 4:
            # –†–∏—Å—É–µ–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫
            draw.rectangle(
                [(coords[0], coords[1]), (coords[2], coords[3])],
                outline=color,
                width=3
            )
            
            # –†–∏—Å—É–µ–º –ø–æ–¥–ø–∏—Å—å
            label = f"{bbox.get('field', '')} ({bbox.get('confidence', 0):.2f})"
            draw.text(
                (coords[0], coords[1] - 20),
                label,
                fill=color,
                font=font
            )
    
    return img_with_boxes

def create_diff_visualization(text1: str, text2: str, label1: str = "–ë–∞–∑–æ–≤—ã–π", label2: str = "–ù–∞—à") -> str:
    """–°–æ–∑–¥–∞–Ω–∏–µ HTML –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–∞–∑–ª–∏—á–∏–π –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–µ–∫—Å—Ç–∞–º–∏"""
    diff = difflib.unified_diff(
        text1.splitlines(keepends=True),
        text2.splitlines(keepends=True),
        fromfile=label1,
        tofile=label2,
        lineterm=''
    )
    
    html_diff = """
    <div style='display: grid; grid-template-columns: 1fr 1fr; gap: 20px;'>
        <div>
            <h4 style='color: #d73a49;'>{}</h4>
            <div style='background: #f6f8fa; padding: 10px; border-radius: 5px; max-height: 400px; overflow-y: auto;'>
                <pre style='white-space: pre-wrap;'>{}</pre>
            </div>
        </div>
        <div>
            <h4 style='color: #22863a;'>{}</h4>
            <div style='background: #f6f8fa; padding: 10px; border-radius: 5px; max-height: 400px; overflow-y: auto;'>
                <pre style='white-space: pre-wrap;'>{}</pre>
            </div>
        </div>
    </div>
    """.format(label1, text1, label2, text2)
    
    return html_diff

def create_metrics_chart(metrics: Dict) -> go.Figure:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –º–µ—Ç—Ä–∏–∫"""
    categories = list(metrics.keys())
    values = list(metrics.values())
    
    fig = go.Figure(data=[
        go.Bar(
            x=categories,
            y=values,
            text=[f'{v:.2%}' for v in values],
            textposition='auto',
            marker=dict(
                color=values,
                colorscale='Viridis',
                showscale=True,
                colorbar=dict(title="–û—Ü–µ–Ω–∫–∞")
            )
        )
    ])
    
    fig.update_layout(
        title="–ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ OCR",
        xaxis_title="–ú–µ—Ç—Ä–∏–∫–∞",
        yaxis_title="–û—Ü–µ–Ω–∫–∞",
        yaxis=dict(range=[0, 1]),
        height=400,
        template="plotly_white"
    )
    
    return fig

def process_pdf_to_images(pdf_file) -> List[Image.Image]:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è PDF –≤ —Å–ø–∏—Å–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    try:
        import fitz  # PyMuPDF
        pdf_bytes = pdf_file.read()
        pdf_document = fitz.open(stream=pdf_bytes, filetype="pdf")
        images = []
        
        for page_num in range(pdf_document.page_count):
            page = pdf_document[page_num]
            pix = page.get_pixmap(matrix=fitz.Matrix(2, 2))  # 2x —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
            img_data = pix.tobytes("png")
            img = Image.open(io.BytesIO(img_data))
            images.append(img)
        
        pdf_document.close()
        return images
    except ImportError:
        st.error("PyMuPDF –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ PDF —Ñ–∞–π–ª–æ–≤.")
        return []

# –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
def main():
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º
    st.markdown("""
    <div style='background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); 
                padding: 2rem; border-radius: 10px; margin-bottom: 2rem;'>
        <h1 style='color: white; text-align: center; margin: 0;'>üîç OCR 2.0 –î–µ–º–æ</h1>
        <p style='color: rgba(255,255,255,0.9); text-align: center; margin-top: 0.5rem;'>
            –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å AI-—Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ–º —Ç–µ–∫—Å—Ç–∞
        </p>
    </div>
    """, unsafe_allow_html=True)
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    with st.sidebar:
        st.markdown("### ‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è")
        
        # –í—ã–±–æ—Ä OCR –¥–≤–∏–∂–∫–∞
        ocr_engine = st.selectbox(
            "üéØ OCR –î–≤–∏–∂–æ–∫",
            options=['PaddleOCR', 'Tesseract', 'TrOCR', '–ê–Ω—Å–∞–º–±–ª—å'],
            help="–í—ã–±–µ—Ä–∏—Ç–µ –¥–≤–∏–∂–æ–∫ OCR –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞"
        )
        
        # –û–ø—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        st.markdown("### üõ†Ô∏è –û–ø—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        use_llm = st.checkbox("ü§ñ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å LLM –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫—É", value=False)
        show_bboxes = st.checkbox("üì¶ –ü–æ–∫–∞–∑–∞—Ç—å –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—é—â–∏–µ —Ä–∞–º–∫–∏", value=True)
        enable_baseline = st.checkbox("üìä –°—Ä–∞–≤–Ω–∏—Ç—å —Å –±–∞–∑–æ–≤—ã–º –º–µ—Ç–æ–¥–æ–º", value=False)
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        with st.expander("üîß –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"):
            confidence_threshold = st.slider(
                "–ü–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏",
                min_value=0.0,
                max_value=1.0,
                value=0.5,
                step=0.05
            )
            
            language = st.selectbox(
                "–Ø–∑—ã–∫",
                options=['en', 'ru', 'kz', 'multi'],
                index=3
            )
            
            output_format = st.radio(
                "–§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞",
                options=['JSON', 'CSV', 'XML']
            )
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    col1, col2 = st.columns([1, 1])
    
    with col1:
        st.markdown("### üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç")
        uploaded_file = st.file_uploader(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª",
            type=['jpg', 'jpeg', 'png', 'pdf'],
            help="–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–ª–∏ PDF –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ OCR"
        )
        
        if uploaded_file is not None:
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            if uploaded_file.type == "application/pdf":
                images = process_pdf_to_images(uploaded_file)
                if images:
                    st.markdown(f"üìÑ **PDF –î–æ–∫—É–º–µ–Ω—Ç** ({len(images)} —Å—Ç—Ä–∞–Ω–∏—Ü)")
                    selected_page = st.selectbox(
                        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É",
                        options=range(1, len(images) + 1),
                        format_func=lambda x: f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {x}"
                    )
                    current_image = images[selected_page - 1]
                    st.image(current_image, caption=f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {selected_page}", use_column_width=True)
            else:
                current_image = Image.open(uploaded_file)
                st.image(current_image, caption="–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç", use_column_width=True)
            
            # –ö–Ω–æ–ø–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å OCR", type="primary", use_container_width=True):
                with st.spinner(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å –ø–æ–º–æ—â—å—é {ocr_engine}..."):
                    st.session_state.processing = True
                    
                    # –ó–∞–ø—É—Å–∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ OCR –¥–≤–∏–∂–∫–∞
                    if ocr_engine == 'PaddleOCR':
                        ocr_output = run_paddle(current_image)
                        raw_text = get_plaintext(ocr_output)
                        extracted_data = extract_fields_from_paddle(ocr_output)
                    elif ocr_engine == 'Tesseract':
                        raw_text, ocr_data = run_tesseract(current_image)
                        extracted_data = extract_fields_from_tesseract(ocr_data)
                    elif ocr_engine == 'TrOCR':
                        ocr_output = run_trocr(current_image)
                        raw_text = ocr_output.get('text', '')
                        extracted_data = ocr_output.get('fields', {})
                    
                    # –ü–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞
                    if use_llm:
                        final_json = call_llm_to_json(raw_text)
                    else:
                        final_json = rules_based_postprocess(extracted_data, raw_text)
                    
                    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                    st.session_state.ocr_results = {
                        'raw_text': raw_text,
                        'extracted_data': extracted_data,
                        'final_json': final_json,
                        'bboxes': ocr_output.get('bboxes', []) if isinstance(ocr_output, dict) else []
                    }
                    
                    # –ó–∞–ø—É—Å–∫ –±–∞–∑–æ–≤–æ–≥–æ –º–µ—Ç–æ–¥–∞ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω
                    if enable_baseline:
                        baseline_text, baseline_data = run_tesseract(current_image)
                        st.session_state.baseline_results = {
                            'raw_text': baseline_text,
                            'extracted_data': extract_fields_from_tesseract(baseline_data)
                        }
                    
                    st.session_state.processing = False
                    st.success("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ OCR –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    
    with col2:
        if st.session_state.ocr_results:
            st.markdown("### üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã")
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π
            tab1, tab2, tab3, tab4 = st.tabs(["üìù –°—ã—Ä–æ–π —Ç–µ–∫—Å—Ç", "üóÇÔ∏è –ò–∑–≤–ª–µ—á—ë–Ω–Ω—ã–π JSON", "üìà –ú–µ—Ç—Ä–∏–∫–∏", "üîç –°—Ä–∞–≤–Ω–µ–Ω–∏–µ"])
            
            with tab1:
                st.markdown("#### –°—ã—Ä–æ–π –≤—ã–≤–æ–¥ OCR")
                st.text_area(
                    "–ò–∑–≤–ª–µ—á—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç",
                    value=st.session_state.ocr_results['raw_text'],
                    height=300,
                    disabled=True
                )
                
                # –ö–Ω–æ–ø–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
                if st.button("üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç", key="copy_raw"):
                    st.write("–¢–µ–∫—Å—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!")
                    st.code(st.session_state.ocr_results['raw_text'])
            
            with tab2:
                st.markdown("#### –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
                
                # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ JSON —Å –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
                st.json(st.session_state.ocr_results['final_json'])
                
                # –ö–Ω–æ–ø–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏
                col1, col2 = st.columns(2)
                with col1:
                    json_str = json.dumps(st.session_state.ocr_results['final_json'], indent=2, ensure_ascii=False)
                    st.download_button(
                        label="‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å JSON",
                        data=json_str,
                        file_name=f"ocr_—Ä–µ–∑—É–ª—å—Ç–∞—Ç_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json",
                        mime="application/json"
                    )
                
                with col2:
                    if output_format == 'CSV':
                        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ CSV —Ñ–æ—Ä–º–∞—Ç
                        import pandas as pd
                        df = pd.DataFrame([st.session_state.ocr_results['final_json']])
                        csv = df.to_csv(index=False)
                        st.download_button(
                            label="‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å CSV",
                            data=csv,
                            file_name=f"ocr_—Ä–µ–∑—É–ª—å—Ç–∞—Ç_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                            mime="text/csv"
                        )
            
            with tab3:
                st.markdown("#### –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
                
                if enable_baseline and st.session_state.baseline_results:
                    # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
                    metrics = {
                        'CER': cer(
                            st.session_state.baseline_results['raw_text'],
                            st.session_state.ocr_results['raw_text']
                        ),
                        'WER': wer(
                            st.session_state.baseline_results['raw_text'],
                            st.session_state.ocr_results['raw_text']
                        ),
                        '–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å': 0.85,  # –ü—Ä–∏–º–µ—Ä –æ—Ü–µ–Ω–∫–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
                        '–°–∫–æ—Ä–æ—Å—Ç—å': 0.92  # –ü—Ä–∏–º–µ—Ä –º–µ—Ç—Ä–∏–∫–∏ —Å–∫–æ—Ä–æ—Å—Ç–∏
                    }
                    
                    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –º–µ—Ç—Ä–∏–∫
                    fig = create_metrics_chart(metrics)
                    st.plotly_chart(fig, use_container_width=True)
                    
                    # –ö–∞—Ä—Ç–æ—á–∫–∏ –º–µ—Ç—Ä–∏–∫
                    col1, col2, col3, col4 = st.columns(4)
                    with col1:
                        st.metric("CER", f"{metrics['CER']:.2%}", delta="‚Üë 5%")
                    with col2:
                        st.metric("WER", f"{metrics['WER']:.2%}", delta="‚Üë 3%")
                    with col3:
                        st.metric("–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", f"{metrics['–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å']:.2%}")
                    with col4:
                        st.metric("–°–∫–æ—Ä–æ—Å—Ç—å", f"{metrics['–°–∫–æ—Ä–æ—Å—Ç—å']:.2%}")
                else:
                    st.info("–í–∫–ª—é—á–∏—Ç–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–≤—ã–º –º–µ—Ç–æ–¥–æ–º –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–µ—Ç—Ä–∏–∫")
            
            with tab4:
                if enable_baseline and st.session_state.baseline_results:
                    st.markdown("#### –ë–∞–∑–æ–≤—ã–π –º–µ—Ç–æ–¥ vs –ù–∞—à –º–µ—Ç–æ–¥")
                    
                    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–∑–ª–∏—á–∏–π
                    diff_html = create_diff_visualization(
                        st.session_state.baseline_results['raw_text'],
                        st.session_state.ocr_results['raw_text'],
                        "–ë–∞–∑–æ–≤—ã–π (Tesseract)",
                        f"–ù–∞—à ({ocr_engine})"
                    )
                    st.markdown(diff_html, unsafe_allow_html=True)
                    
                    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ JSON –±–æ–∫ –æ –±–æ–∫
                    st.markdown("##### –°—Ä–∞–≤–Ω–µ–Ω–∏–µ JSON –≤—ã–≤–æ–¥–∞")
                    col1, col2 = st.columns(2)
                    with col1:
                        st.markdown("**–ë–∞–∑–æ–≤—ã–π –º–µ—Ç–æ–¥**")
                        st.json(st.session_state.baseline_results['extracted_data'])
                    with col2:
                        st.markdown(f"**{ocr_engine}**")
                        st.json(st.session_state.ocr_results['final_json'])
                else:
                    st.info("–í–∫–ª—é—á–∏—Ç–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–≤—ã–º –º–µ—Ç–æ–¥–æ–º –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞–∑–ª–∏—á–∏–π")
    
    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—é—â–∏—Ö —Ä–∞–º–æ–∫
    if show_bboxes and st.session_state.ocr_results and 'current_image' in locals():
        st.markdown("### üì¶ –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ø–æ–ª–µ–π")
        if st.session_state.ocr_results.get('bboxes'):
            img_with_boxes = draw_bboxes_on_image(
                current_image,
                st.session_state.ocr_results['bboxes']
            )
            st.image(img_with_boxes, caption="–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –ø–æ–ª—è —Å –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—é—â–∏–º–∏ —Ä–∞–º–∫–∞–º–∏", use_column_width=True)
            
            # –õ–µ–≥–µ–Ω–¥–∞ –¥–ª—è —Ü–≤–µ—Ç–æ–≤ bbox
            st.markdown("""
            **–õ–µ–≥–µ–Ω–¥–∞ —Ç–∏–ø–æ–≤ –ø–æ–ª–µ–π:**
            - üî¥ –ü–æ–ª—è –∏–º—ë–Ω
            - üü¢ –ü–æ–ª—è –¥–∞—Ç  
            - üîµ –ü–æ–ª—è —Å—É–º–º
            - üü° –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            - üü£ Email –∞–¥—Ä–µ—Å–∞
            """)
    
    # –§—É—Ç–µ—Ä —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    st.markdown("---")
    st.markdown("""
    <div style='text-align: center; color: #666; padding: 1rem;'>
        <p>OCR 2.0 –î–µ–º–æ | –†–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö AI –º–æ–¥–µ–ª—è—Ö</p>
        <p style='font-size: 0.9rem;'>
            üìß –ö–æ–Ω—Ç–∞–∫—Ç—ã: ocr-team@example.com | 
            üìö <a href='#'>–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è</a> | 
            üêõ <a href='#'>–°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ</a>
        </p>
    </div>
    """, unsafe_allow_html=True)

if __name__ == "__main__":
    main()