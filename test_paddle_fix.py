#!/usr/bin/env python3
"""
Test fixed PaddleOCR implementation with OCRResult format
"""

import sys
import os
from pathlib import Path

# Add src directory to path
src_path = Path(__file__).parent / "scr"
sys.path.insert(0, str(src_path))

def test_paddle_ocr_fix():
    """Test PaddleOCR with fixed normalization"""
    try:
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ PaddleOCR...")
        from ocr_paddle import run_paddle
        
        # Test with a sample image
        test_image = "scr/uploads/20250914_230135_2025-09-14_225307.png"
        if os.path.exists(test_image):
            print(f"üìÅ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º: {test_image}")
            result = run_paddle(test_image, lang='ru')
            
            if isinstance(result, list) and len(result) > 0:
                print(f"‚úÖ PaddleOCR —Ä–∞–±–æ—Ç–∞–µ—Ç! –ù–∞–π–¥–µ–Ω–æ {len(result)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                print("üìù –ü–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
                for i, item in enumerate(result[:5]):
                    text = item.get('text', '').strip()
                    conf = item.get('conf', 0)
                    print(f"  {i+1}. '{text}' (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {conf:.2f})")
                
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç
                all_text = '\n'.join([item.get('text', '') for item in result])
                print(f"\nüìÑ –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç ({len(all_text)} —Å–∏–º–≤–æ–ª–æ–≤):")
                print(all_text[:200] + "..." if len(all_text) > 200 else all_text)
                return True
            else:
                print("‚ùå PaddleOCR –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
                return False
        else:
            print(f"‚ùå –¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {test_image}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ PaddleOCR: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_normalize_function():
    """Test the normalize function specifically with problematic data"""
    try:
        print("\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏...")
        from ocr_paddle import normalize_paddle_output
        
        # Test with various problematic inputs
        test_cases = [
            # Normal case
            [[[[1, 2], [3, 4], [5, 6], [7, 8]], ['normal text', 0.95]]],
            
            # Case with string coordinates (like 'i')
            [[[[1, 2], [3, 'i'], [5, 6], [7, 8]], ['text with bad coord', 0.8]]],
            
            # Empty case
            [[]],
            
            # Case with missing data
            [[[[], ['empty coords', 0.5]]]],
        ]
        
        for i, test_case in enumerate(test_cases):
            print(f"  –¢–µ—Å—Ç {i+1}: ", end="")
            try:
                result = normalize_paddle_output(test_case)
                print(f"‚úÖ OK - –ø–æ–ª—É—á–µ–Ω–æ {len(result)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π PaddleOCR...\n")
    
    # Test normalization function first
    normalize_ok = test_normalize_function()
    
    # Test full PaddleOCR if normalization works
    if normalize_ok:
        paddle_ok = test_paddle_ocr_fix()
    else:
        paddle_ok = False
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    print(f"  –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è: {'‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' if normalize_ok else '‚ùå –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç'}")
    print(f"  PaddleOCR: {'‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' if paddle_ok else '‚ùå –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç'}")
    
    if paddle_ok and normalize_ok:
        print("\nüéâ –í—Å–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç! PaddleOCR –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.")
    else:
        print("\nüîß –¢—Ä–µ–±—É—é—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")
        
    print("\n‚ÑπÔ∏è  –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ venv –∑–∞–ø—É—Å—Ç–∏—Ç–µ:")
    print("    (venv) python test_paddle_fix.py")