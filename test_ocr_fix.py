#!/usr/bin/env python3
"""
Test script to verify OCR engines work after fixes
"""

import sys
import os
from pathlib import Path

# Add src directory to path
src_path = Path(__file__).parent / "scr"
sys.path.insert(0, str(src_path))

def test_paddle_ocr():
    """Test PaddleOCR with fixed API call"""
    try:
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ PaddleOCR...")
        from ocr_paddle import run_paddle
        
        # Test with a sample image
        test_image = "scr/uploads/20250914_225421_2025-09-14_225307.png"
        if os.path.exists(test_image):
            result = run_paddle(test_image, lang='ru')
            print(f"‚úÖ PaddleOCR —Ä–∞–±–æ—Ç–∞–µ—Ç! –†–µ–∑—É–ª—å—Ç–∞—Ç: {result[:100]}...")
            return True
        else:
            print(f"‚ùå –¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {test_image}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ PaddleOCR: {e}")
        return False

def test_trocr():
    """Test TrOCR with fixed implementation"""
    try:
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ TrOCR...")
        from ocr_trocr import run_trocr
        
        # Test with a sample image
        test_image = "scr/uploads/20250914_225421_2025-09-14_225307.png"
        if os.path.exists(test_image):
            result = run_trocr(test_image)
            print(f"‚úÖ TrOCR —Ä–∞–±–æ—Ç–∞–µ—Ç! –†–µ–∑—É–ª—å—Ç–∞—Ç: {result[:100]}...")
            return True
        else:
            print(f"‚ùå –¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {test_image}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ TrOCR: {e}")
        return False

def test_tesseract():
    """Test Tesseract as reference"""
    try:
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Tesseract...")
        from ocr_baseline import run_tesseract
        
        # Test with a sample image
        test_image = "scr/uploads/20250914_225421_2025-09-14_225307.png"
        if os.path.exists(test_image):
            result = run_tesseract(test_image, lang='rus')
            print(f"‚úÖ Tesseract —Ä–∞–±–æ—Ç–∞–µ—Ç! –†–µ–∑—É–ª—å—Ç–∞—Ç: {result[:100]}...")
            return True
        else:
            print(f"‚ùå –¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {test_image}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Tesseract: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö OCR –¥–≤–∏–∂–∫–æ–≤...\n")
    
    results = {
        "Tesseract": test_tesseract(),
        "PaddleOCR": test_paddle_ocr(),
        "TrOCR": test_trocr()
    }
    
    print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    for engine, success in results.items():
        status = "‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç" if success else "‚ùå –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
        print(f"  {engine}: {status}")
    
    working_count = sum(results.values())
    total_count = len(results)
    
    print(f"\nüéØ –ò—Ç–æ–≥–æ: {working_count}/{total_count} –¥–≤–∏–∂–∫–æ–≤ —Ä–∞–±–æ—Ç–∞—é—Ç")
    
    if working_count == total_count:
        print("üéâ –í—Å–µ –¥–≤–∏–∂–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
    elif working_count > 0:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–≤–∏–∂–∫–∏ —Ç—Ä–µ–±—É—é—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
    else:
        print("üîß –í—Å–µ –¥–≤–∏–∂–∫–∏ —Ç—Ä–µ–±—É—é—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")